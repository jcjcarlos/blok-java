/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package blok.gui;

import blok.Core;
import blok.interfaces.abstractFactory.IThemeFactory;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.io.File;
import java.net.URL;
import java.net.URLClassLoader;

import javax.swing.plaf.synth.SynthSeparatorUI;

/**
 *
 * @author sandroandrade
 */
public class MainWindow extends javax.swing.JFrame {

	/**
	 * Creates new form MainWindow
	 */
	private MainWindow(MainPanel mainPanel) {
		// loadPlugins();
		this.pluginsThemes = Core.getInstance().getPluginController().getFactoriesNames();
		this.pluginsSimulators = Core.getInstance().getPluginController().getSimulatorsNames();
		initComponents();
		Dimension size = new Dimension(1000, 600);

		// mainPanel = MainPanel.getInstance(factory);
		mainPanel.setPreferredSize(size);
		mainPanel.setMinimumSize(size);
		mainPanel.setMaximumSize(size);
		mainPanel.setSize(size);
		setContentPane(mainPanel);

		setResizable(false);
		pack();

		// Simulator simulator = Simulator.getInstance();
		// mainPanel.setSimulator(simulator);
		// simulator.init();
		// simulator.start();
	}

	public static MainWindow getInstance(MainPanel mainPanel) {
		if (mainWindow == null)
			mainWindow = new MainWindow(mainPanel);
		return mainWindow;
	}
	/*
	 * @SuppressWarnings("deprecation") private void loadPlugins() { try { File
	 * currentDir = new File("./plugins"); this.plugins = currentDir.list(); URL[]
	 * jars = new URL[plugins.length]; for(int i = 0; i < plugins.length; i++) {
	 * jars[i] = (new File("./plugins/"+ plugins[i])).toURL(); } this.ulc = new
	 * URLClassLoader(jars); setFactory(); } catch(Exception e) {
	 * System.out.println(e); } }
	 * 
	 * private void setFactory() { try { if(this.nomeClasse == null) this.nomeClasse
	 * = plugins[0].split("\\.")[0]; this.factory =
	 * (IThemeFactory)Class.forName("blok."+this.nomeClasse.toLowerCase()+
	 * "."+this.nomeClasse,true,ulc).newInstance(); if(this.factory!=null)
	 * this.mainPanel.setFactory(factory); } catch(Exception e) {
	 * System.out.println(e); }
	 * 
	 * }
	 */

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu("Themes");
		jMenu2 = new javax.swing.JMenu("Simulators");
		jMenu3 = new javax.swing.JMenu("Options");
		jMenuItems1 = new javax.swing.JMenuItem[this.pluginsThemes.length];
		jMenuItems2 = new javax.swing.JMenuItem[this.pluginsSimulators.length];
		jMenuItems3 = new javax.swing.JMenuItem[2];
		jMenuBar1.add(jMenu1);
		jMenuBar1.add(jMenu2);
		jMenuBar1.add(jMenu3);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		getContentPane().setLayout(new java.awt.GridLayout(1, 0));

		for (int i = 0; i < this.pluginsThemes.length; i++) {
			jMenuItems1[i] = new javax.swing.JMenuItem(this.pluginsThemes[i].split("\\.")[0]);
			jMenuItems1[i].addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jThemesActionPerformed(evt);
				}
			});
			jMenu1.add(jMenuItems1[i]);
		}

		for (int i = 0; i < this.pluginsSimulators.length; i++) {
			jMenuItems2[i] = new javax.swing.JMenuItem(this.pluginsSimulators[i].split("\\.")[0]);
			jMenuItems2[i].addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jSimulatorsActionPerformed(evt);
				}
			});
			jMenu2.add(jMenuItems2[i]);
		}

		for (int i = 0; i < 2; i++) {
			jMenuItems3[i] = new javax.swing.JMenuItem();
			jMenuItems3[i].addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jRefreshActionPerformed(evt);
				}
			});
			jMenu3.add(jMenuItems3[i]);
		}

		setJMenuBar(jMenuBar1);
		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jThemesActionPerformed(java.awt.event.ActionEvent evt) {
		Core.getInstance().getUIController().getMainPanel().setFactory(Core.getInstance().getPluginController().
																	   getFactory(evt.getActionCommand()));
	}

	private void jSimulatorsActionPerformed(java.awt.event.ActionEvent evt) {
		Core.getInstance().getUIController().getMainPanel().setSimulator(Core.getInstance().getPluginController().
																		 getSimulator(evt.getActionCommand()));
	}

	private void jRefreshActionPerformed(java.awt.event.ActionEvent evt) {
		// loadPlugins();
		Core.getInstance().getPluginController().initialize();
		this.pluginsThemes = Core.getInstance().getPluginController().getFactoriesNames();
		initComponents();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenu jMenu3;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenuItem[] jMenuItems1;
	private javax.swing.JMenuItem[] jMenuItems2;
	private javax.swing.JMenuItem[] jMenuItems3;

	// End of variables declaration//GEN-END:variables
	private IThemeFactory factory = null;
	private static MainWindow mainWindow = null;
	String[] pluginsThemes;
	String[] pluginsSimulators;
	String nomeClasse;
}
